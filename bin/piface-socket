#!/usr/bin/env python

import socket
import sys
import os
import signal

import json

if len(sys.argv) < 2:
    sys.exit('Usage: %s <socket-file-path>' % sys.argv[0])

connection = None
listener = None
lcd_text_manager = None

# Catch term and exit
def clean_shutdown():
    connection.close()
    listener.deactivate()
    lcd_text_manager.stop()
    sys.exit(1)

signal.signal(signal.SIGTERM, clean_shutdown)

server_address = sys.argv[1]

debug = os.getenv('DEBUG', False)
if debug:
    print 'Starting web server for debug'
    from piface_web import web, pifacecad
else:
    import pifacecad

cad = pifacecad.PiFaceCAD()

# Make sure the socket does not already exist
try:
    os.unlink(server_address)
except OSError:
    if os.path.exists(server_address):
        raise

# Create a UDS socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)

# Bind the socket to the port
print >>sys.stderr, 'starting up on %s' % server_address
sock.bind(server_address)

# Listen for incoming connections
sock.listen(1)

def init_lcd():
    cad.lcd.blink_off()
    cad.lcd.clear()
    cad.lcd.cursor_off()
    cad.lcd.backlight_on()

init_lcd()

import time
import threading
class LCDTextManager(threading.Thread):
    def __init__(self, lcd_write_func, seconds):
        self.lcd_write_func = lcd_write_func
        self.runTime = seconds
        self.buffers = ['', '']
        self.cursors = [0, 0]
        self.limit = 17
        threading.Thread.__init__(self)

    def lines(self, lines):
        if lines[0] != self.buffers[0]:
            self.cursors[0] = 0
            self.buffers[0] = lines[0]
        self.write()

    def update(self):
        if len(self.buffers[0]) >= self.limit:
            self.cursors[0] += 1
        self.write()
        time.sleep(self.runTime)
        self.update()

    def write(self):
        self.lcd_write_func([
            self.get_line(self.buffers[0], self.cursors[0], self.limit),
            self.get_line(self.buffers[1], self.cursors[1], self.limit)
        ])

    def get_line(self, line, cursor, limit):
        wrapped_cursor_pos = cursor % limit
        sliced = line[wrapped_cursor_pos:limit]
        is_str_over_limit = len(line) >= limit
        is_sliced_over_limit = len(sliced) < limit
        if is_str_over_limit and is_sliced_over_limit:
            sliced += '  ' + line
        return sliced[0:limit]

    def run(self):
        self.update()

    def stop(self):
        self.lines(['', ''])

sys.path.append(os.path.abspath( __file__ + "/../.."))
from piface_web import line_reader
reader = line_reader.LineReader()

# while True:
# Wait for a connection
print >>sys.stderr, 'waiting for a connection'
connection, client_address = sock.accept()

def handle_scrolling_writer(lines):
    lcd_text_manager.lines(lines)

def handle_lcd_write(lines):
    cad.lcd.clear()
    cad.lcd.set_cursor(0, 0)
    cad.lcd.write(lines[0])
    if lines[1]:
        cad.lcd.set_cursor(0, 1)
        cad.lcd.write(lines[1])

def handle_button_event(event):
    print event
    data = {'type': 'button', 'id': event.pin_num, 'value': 1}
    print 'handle_button_event'
    print data
    connection.sendall(json.dumps(data))

def handle_incoming_message(msg):
    data = json.loads(msg)
    if data['type'] == 'display':
        handle_scrolling_writer(data['lines'])

lcd_text_manager = LCDTextManager(handle_lcd_write, 1)
lcd_text_manager.start()

listener = pifacecad.SwitchEventListener(chip=cad)
for pin in range(0, 8):
    listener.register(pin, pifacecad.IODIR_FALLING_EDGE, handle_button_event)
listener.activate()

try:
    print >>sys.stderr, 'connection from', client_address

    # Receive the data in small chunks and retransmit it
    while True:

        data = connection.recv(4096)

        if len(data) == 0:
            print 'socket has closed'
            break;

        reader.push(data)
        messages = reader.process()

        if messages:
            print "Received %i messages" % len(messages)

            for msg in messages:
                handle_incoming_message(msg)

finally:
    # Clean up the connection
    print "Cleaning up connection"
    clean_shutdown()
    